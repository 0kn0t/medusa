<html lang=en>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Coverage Report</title>
    <style>
        body {
            font-family: Arial, Helvetica, sans-serif;
            font-size: 15px;
            margin: 0;
            background-color: #eee;
            height: 100vh;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        header {
            flex: 0 0 auto;
            padding: 15px;
        }
        footer {
            flex: 0 0 auto;
            padding: 15px;
            line-height: 1.5;
        }
        hr {
            margin: 15px 0px;
            background-color: transparent;
            border: 0;
            border-top: 1px solid #ccc;
        }
        a {
            color: #2A5DB0;
            text-decoration: none;
        }
        a:hover {
            text-decoration: underline;
        }
        a:active {
            color: black;
        }
        a:visited {
            color: #2A5DB0;
        }
        .progress-coverage {
            width: 50px;
        }
        .unselectable {
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }
        .button-sort {
            cursor: pointer;
        }
        /* Split panel layout */
        .split-panel {
            display: flex;
            flex: 1 1 auto;
            overflow: hidden;
            position: relative;
        }
        #file-split-panel {
            display: flex;
            flex-direction: row;
        }
        #file-explorer {
            flex: 0 0 250px;
            height: 100%;
            overflow: auto;
            background-color: #f5f5f5;
            border-right: 1px solid #ccc;
            padding: 10px;
            box-sizing: border-box;
            position: relative;
            min-width: 40px;
            max-width: 500px;
            resize: horizontal;
            transition: width 0.3s ease;
        }
        #file-explorer.collapsed {
            flex: 0 0 40px;
            overflow: hidden;
        }
        .file-explorer-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        #toggle-explorer {
            background: none;
            border: none;
            font-size: 16px;
            cursor: pointer;
            padding: 0 5px;
        }
        #file-explorer.collapsed #toggle-explorer {
            transform: rotate(180deg);
        }
        #file-explorer.collapsed .file-tree,
        #file-explorer.collapsed h3 {
            display: none;
        }
        #main-view-panel {
            flex: 1 1 auto;
            height: 100%;
            overflow: auto;
            padding: 15px;
            box-sizing: border-box;
        }
        #resizer {
            width: 5px;
            height: 100%;
            background-color: #ccc;
            cursor: col-resize;
            position: absolute;
            right: 0;
            top: 0;
        }
        
        /* File tree styles */
        .file-tree {
            list-style-type: none;
            padding-left: 0;
            margin: 0;
        }
        .file-tree li {
            margin: 3px 0;
        }
        .file-tree ul {
            list-style-type: none;
            padding-left: 20px;
            margin: 0;
        }
        .file-item {
            display: flex;
            align-items: center;
            cursor: pointer;
            padding: 3px 5px;
            border-radius: 3px;
        }
        .file-item:hover {
            background-color: #e0e0e0;
        }
        .file-item.active {
            background-color: #d0d0d0;
        }
        .file-toggle {
            width: 16px;
            text-align: center;
            cursor: pointer;
            color: #555;
            font-size: 10px;
        }
        .file-icon {
            margin: 0 5px;
            color: #555;
        }
        .file-name {
            flex: 1;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        .file-coverage {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-left: 5px;
        }
        .directory > .file-item > .file-icon:before {
            content: "📁";
        }
        .directory.expanded > .file-item > .file-icon:before {
            content: "📂";
        }
        .file > .file-item > .file-icon:before {
            content: "📄";
        }
        .directory > .file-item > .file-toggle:before {
            content: "►";
        }
        .directory.expanded > .file-item > .file-toggle:before {
            content: "▼";
        }
        .file > .file-item > .file-toggle {
            visibility: hidden;
        }
        .directory > ul {
            display: none;
        }
        .directory.expanded > ul {
            display: block;
        }
        .collapsible {
            background-color: #777;
            color: white;
            cursor: pointer;
            padding: 8px;
            width: 100%;
            border: none;
            text-align: left;
            outline: none;
            font-size: 12px;
        }
        .collapsible-active, .collapsible:hover {
            background-color: #555;
        }
        .collapsible:after {
            content: "\002B";
            color: white;
            font-weight: bold;
            float: left;
            margin-left: 5px;
            margin-right: 5px;
        }
        .collapsible-active:after {
            content: "\2212";
        }
        .collapsible-active + .collapsible-container {
            max-height: none;
        }
        .collapsible-container {
            margin-bottom: 5px;
            max-height: 0;
            overflow: hidden;
            background-color: #ddd;
        }
        .collapsible-container-content {
            padding: 15px;
        }
        .code-coverage-table {
            border-collapse: collapse;
            font-family: "Lucida Console", Monaco, monospace;
            font-size: 12px;
            font-style: normal;
            font-variant: normal;
            font-weight: 400;
            line-height: 1.5;
            tab-size: 4;
            width: 100%;
        }
        .row-line-number {
            width: 10px;
            text-align: right;
            padding-right: 3px;
            color: rgba(0, 0, 0, 0.50);
        }
        .row-reverted-status {
            font-size: 12px;
            text-align: center;
            min-width: 10px;
            background-color: rgba(0, 0, 0, 0.04);
            color: rgba(0, 0, 0, 0.70);
            white-space: nowrap;
        }
        .row-source {
            width: 100%;
            padding-left: 20px;
        }
        .row-line-covered {
            background-color: rgba(23, 255, 0, 0.12);
            width: min-content;
        }
        .row-line-uncovered {
            background-color: rgba(255, 0, 0, 0.10);
            width: min-content;
        }
    </style>
</head>

<body>
    <!-- Total coverage metrics/controls -->
    <header>
        <h1>Coverage Report</h1>
        <hr />
        <table>
            <tr><th>Files: </th><td>{{len .Files}}</td></tr>
            <tr><th>Lines: </th><td>{{.LineCount}}</td></tr>
            <tr>
                <th>Covered: </th>
                <td>
                    {{/* Analyze some initial coverage metrics */}}
                    {{$totalLinesCovered := .CoveredLineCount}}
                    {{$totalLinesActive := .ActiveLineCount}}
                    {{$totalPercentCoverageInt := percentageInt $totalLinesCovered $totalLinesActive}}

                    {{/* Output our coverage info with a progress bar alongside it.*/}}
                    {{/*The progress bar's color is set from HSL values (hue 0-100 is red->orange->yellow->green)*/}}
                    {{$totalLinesCovered}} / {{$totalLinesActive}} ({{percentageStr $totalLinesCovered $totalLinesActive 1}}%)
                    <progress class="progress-coverage" value="{{percentageStr $totalLinesCovered $totalLinesActive 0}}" max="100" style="accent-color: hsl({{$totalPercentCoverageInt}}, 100%, 60%)"></progress>
                </td>
            </tr>
            <tr>
                <th>Actions: </th>
                <td>
                    <button class="button button-sort" onclick="setAllSourceFilesCollapsed(false)">Expand All</button>
                    <button class="button button-sort" onclick="setAllSourceFilesCollapsed(true)">Collapse All</button> /
                    <button class="button button-sort" onclick="setEmptySourceFilesCollapsed(false)">Expand Empty</button>
                    <button class="button button-sort" onclick="setEmptySourceFilesCollapsed(true)">Collapse Empty</button>
                </td>
            </tr>
        </table>
    </header>
    <hr />
    <!-- Create a horizontally split panel for our file explorer / coverage view -->
    <div class="split-panel" id="file-split-panel">
        <!-- File Explorer Sidebar -->
        <div id="file-explorer">
            <div class="file-explorer-header">
                <h3>Files</h3>
                <button id="toggle-explorer" title="Toggle file explorer">⟪</button>
            </div>
            <ul id="file-tree-root" class="file-tree file-tree-root"></ul>
            <div id="resizer"></div>
        </div>
        
        <!-- Main panel (coverage) -->
        <div id="main-view-panel">
            <!-- Individual file coverage -->
            {{/* Loop through all sources */}}
            {{range $sourceFile := .SortedFiles}}
                {{/* Analyze some initial coverage metrics */}}
                {{$linesCovered := $sourceFile.CoveredLineCount}}
                {{$linesActive := $sourceFile.ActiveLineCount}}
                {{$linesCoveredPercentInt := percentageInt $linesCovered $linesActive}}

                {{/* Output a container for each source file, with a collapsible header and source container.*/}}
                <div class="source-file" id="{{$sourceFile.Path | filePathToId}}" data-file-path="{{relativePath $sourceFile.Path}}" data-lines-active="{{$linesActive}}" data-lines-covered="{{$linesCovered}}">
                    <button class="collapsible">
                        {{/*The progress bar's color is set from HSL values (hue 0-100 is red->orange->yellow->green)*/}}
                        <span><progress class="progress-coverage" value="{{percentageStr $linesCovered $linesActive 0}}" max="100" style="accent-color: hsl({{$linesCoveredPercentInt}}, 100%, 60%)"></progress></span>
                        <span>[{{percentageStr $linesCovered $linesActive 0}}%]</span>
                        <span>{{relativePath $sourceFile.Path}}</span>
                    </button>
                    <div class="collapsible-container">
                        <div class="collapsible-container-content">
                        <hr />
                        {{/* Output the total line coverage statistics*/}}
                        <table>
                            <tr>
                                <th>Lines covered: </th>
                                <td>{{$linesCovered}} / {{$linesActive}} ({{percentageStr $linesCovered $linesActive 1}}%)</td>
                            </tr>
                        </table>
                        <hr />
                        {{/* Output a tables with a row for each source line*/}}
                        <table class="code-coverage-table">
                            {{range $lineIndex, $line := $sourceFile.Lines}}
                                {{/* Create a row for this source line */}}
                                <tr>
                                    {{/* Output a cell for the line number */}}
                                    <td class="row-line-number unselectable">{{add $lineIndex 1}}</td>

                        {{/* Output two cells for the reverted/non-reverted execution status */}}
                        <td class="row-reverted-status unselectable">
                            {{if $line.IsCovered}}
                                <div title="The source line executed without reverting.">√ {{$line.SuccessHitCount}}</div>
                            {{end}}
                        </td>
                        <td class="row-reverted-status unselectable">
                            {{if $line.IsCoveredReverted}}
                                <div title="The source line executed, but was reverted.">⟳ {{$line.RevertHitCount}}</div>
                            {{end}}
                        </td>

                                    {{/* Output a cell for the source line */}}
                                    {{/* If a source line is "active", it has a source mapping so we mark it green/red */}}
                                    {{/* If a source line is "covered", it is green, otherwise it is red. */}}
                                    <td class="row-source">
                                        {{if not $line.IsActive}}
                                                <pre>{{printf "%s" $line.Contents}}</pre>
                                        {{else if or $line.IsCovered $line.IsCoveredReverted}}
                                                <pre class="row-line-covered">{{printf "%s" $line.Contents}}</pre>
                                        {{else}}
                                                <pre class="row-line-uncovered">{{printf "%s" $line.Contents}}</pre>
                                        {{end}}
                                    </td>
                                </tr>
                            {{end}}
                        </table>
                        </div>
                    </div>
                </div>
            {{end}}
        </div>
    </div>

<script>
    // Add event listeners for collapsible sections to collapse/expand on click.
    const collapsibleHeaders = document.getElementsByClassName("collapsible");
    for (let i = 0; i < collapsibleHeaders.length; i++) {
        collapsibleHeaders[i].addEventListener("click", function() {
            this.classList.toggle("collapsible-active");
        });
    }

    // Helper function to convert a path to a safe HTML ID
    function pathToId(path) {
        return path.replace(/[^a-zA-Z0-9]/g, '_');
    }
    
    // Helper function to get color based on coverage percentage
    function getCoverageColor(covered, total) {
        if (total === 0) return '#aaa'; // No coverage data
        const percentage = (covered / total) * 100;
        // Color gradient from red (0%) to yellow (50%) to green (100%)
        if (percentage < 50) {
            // Red to yellow (0-50%)
            const g = Math.floor((percentage / 50) * 255);
            return `rgb(255, ${g}, 0)`;
        } else {
            // Yellow to green (50-100%)
            const r = Math.floor(255 - ((percentage - 50) / 50) * 255);
            return `rgb(${r}, 255, 0)`;
        }
    }

    // Build file tree structure from file paths
    function buildFileTree() {
        const root = { name: '', type: 'directory', children: {}, path: '' };
        const sourceFiles = document.getElementsByClassName("source-file");
        
        // First pass: build the tree structure
        for (let i = 0; i < sourceFiles.length; i++) {
            const filePath = sourceFiles[i].dataset.filePath;
            const pathParts = filePath.split(/[\/\\]+/);
            let current = root;
            
            // Build the directory structure
            let currentPath = '';
            for (let j = 0; j < pathParts.length; j++) {
                const part = pathParts[j];
                if (part === '') continue;
                
                currentPath += (currentPath ? '/' : '') + part;
                
                if (j === pathParts.length - 1) {
                    // This is a file
                    current.children[part] = {
                        name: part,
                        type: 'file',
                        path: filePath,
                        element: sourceFiles[i],
                        coveredLines: parseInt(sourceFiles[i].dataset.linesCovered),
                        activeLines: parseInt(sourceFiles[i].dataset.linesActive)
                    };
                } else {
                    // This is a directory
                    if (!current.children[part]) {
                        current.children[part] = {
                            name: part,
                            type: 'directory',
                            children: {},
                            path: currentPath
                        };
                    }
                    current = current.children[part];
                }
            }
        }
        
        // Second pass: calculate directory coverage
        calculateDirectoryCoverage(root);
        
        return root;
    }
    
    // Calculate coverage for directories by aggregating file coverage
    function calculateDirectoryCoverage(node) {
        if (node.type === 'file') {
            return {
                coveredLines: node.coveredLines,
                activeLines: node.activeLines
            };
        }
        
        let totalCovered = 0;
        let totalActive = 0;
        
        for (const childName in node.children) {
            const child = node.children[childName];
            const childCoverage = calculateDirectoryCoverage(child);
            
            totalCovered += childCoverage.coveredLines;
            totalActive += childCoverage.activeLines;
        }
        
        node.coveredLines = totalCovered;
        node.activeLines = totalActive;
        
        return {
            coveredLines: totalCovered,
            activeLines: totalActive
        };
    }
    
    // Render the file tree to the DOM
    function renderFileTree(node, parentElement, isRoot = false) {
        const list = isRoot ? parentElement : document.createElement('ul');
        
        // Sort children: directories first, then files, both alphabetically
        const sortedChildren = Object.values(node.children).sort((a, b) => {
            if (a.type !== b.type) {
                return a.type === 'directory' ? -1 : 1;
            }
            return a.name.localeCompare(b.name);
        });
        
        for (const child of sortedChildren) {
            const li = document.createElement('li');
            li.className = child.type;
            
            // Create item container
            const itemDiv = document.createElement('div');
            itemDiv.className = 'file-item';
            
            // Create toggle button for directories
            const toggle = document.createElement('span');
            toggle.className = 'file-toggle';
            itemDiv.appendChild(toggle);
            
            // Create file/folder icon
            const icon = document.createElement('span');
            icon.className = 'file-icon';
            itemDiv.appendChild(icon);
            
            // Create name span
            const nameSpan = document.createElement('span');
            nameSpan.className = 'file-name';
            nameSpan.textContent = child.name;
            itemDiv.appendChild(nameSpan);
            
            // Add coverage indicator
            if (child.activeLines > 0) {
                const coverage = document.createElement('span');
                coverage.className = 'file-coverage';
                coverage.style.backgroundColor = getCoverageColor(child.coveredLines, child.activeLines);
                coverage.title = `${child.coveredLines}/${child.activeLines} lines covered (${Math.round((child.coveredLines / child.activeLines) * 100)}%)`;
                itemDiv.appendChild(coverage);
            }
            
            li.appendChild(itemDiv);
            
            // Handle click events
            if (child.type === 'directory') {
                toggle.addEventListener('click', (e) => {
                    e.stopPropagation();
                    li.classList.toggle('expanded');
                });
                itemDiv.addEventListener('click', () => {
                    li.classList.toggle('expanded');
                });
                
                // Recursively render children
                renderFileTree(child, li);
            } else {
                // Add click handler for files
                itemDiv.addEventListener('click', () => {
                    // Deactivate all other items
                    document.querySelectorAll('.file-item.active').forEach(el => {
                        el.classList.remove('active');
                    });
                    
                    // Activate this item
                    itemDiv.classList.add('active');
                    
                    // Navigate to the file
                    const fileElement = child.element;
                    fileElement.scrollIntoView({ behavior: 'smooth' });
                    
                    // Expand the file if it's collapsed
                    const collapsible = fileElement.querySelector('.collapsible');
                    if (!collapsible.classList.contains('collapsible-active')) {
                        collapsible.click();
                    }
                });
            }
            
            list.appendChild(li);
        }
        
        if (!isRoot) {
            parentElement.appendChild(list);
        }
    }

    // Button click event handler for expanding/collapsing all files.
    function setAllSourceFilesCollapsed(collapsed) {
        let i;
        for (i = 0; i < collapsibleHeaders.length; i++) {
            if (collapsed) {
                collapsibleHeaders[i].classList.remove("collapsible-active");
            } else {
                collapsibleHeaders[i].classList.add("collapsible-active");
            }
        }
    }

    // Button click event handler for expanding/collapsing empty files.
    function setEmptySourceFilesCollapsed(collapsed) {
        let i;
        for (i = 0; i < sourceFiles.length; i++) {
            // Verify the item is an empty source file.
            if (sourceFiles[i].dataset.linesActive <= 0) {
                let collapsibleHeader = sourceFiles[i].querySelector('.collapsible');
                if (collapsed) {
                    collapsibleHeader.classList.remove("collapsible-active");
                } else {
                    collapsibleHeader.classList.add("collapsible-active");
                }
            }
        }
    }
    
    // Initialize the file tree when the page loads
    document.addEventListener('DOMContentLoaded', () => {
        const fileTreeRoot = document.getElementById('file-tree-root');
        const fileTree = buildFileTree();
        renderFileTree(fileTree, fileTreeRoot, true);
        
        // Expand the first level directories by default
        document.querySelectorAll('#file-tree-root > li.directory').forEach(dir => {
            dir.classList.add('expanded');
        });
        
        // Initialize resizer
        initResizer();
        
        // Initialize toggle explorer
        initToggleExplorer();
    });
    
    // Initialize the toggle explorer functionality
    function initToggleExplorer() {
        const toggleButton = document.getElementById('toggle-explorer');
        const fileExplorer = document.getElementById('file-explorer');
        let explorerWidth = 250; // Default width to restore to
        
        toggleButton.addEventListener('click', () => {
            if (fileExplorer.classList.contains('collapsed')) {
                // Expand
                fileExplorer.classList.remove('collapsed');
                fileExplorer.style.width = explorerWidth + 'px';
            } else {
                // Collapse
                explorerWidth = parseInt(window.getComputedStyle(fileExplorer).width, 10);
                fileExplorer.classList.add('collapsed');
            }
        });
    }
    
    // Initialize the resizer functionality
    function initResizer() {
        const resizer = document.getElementById('resizer');
        const fileExplorer = document.getElementById('file-explorer');
        
        // The current position of mouse
        let x = 0;
        let w = 0;
        
        // Handle the mousedown event that triggers resizing
        const mouseDownHandler = function(e) {
            // Get the current mouse position
            x = e.clientX;
            
            // Get the current width of the file explorer
            const styles = window.getComputedStyle(fileExplorer);
            w = parseInt(styles.width, 10);
            
            // Add event listeners for mousemove and mouseup
            document.addEventListener('mousemove', mouseMoveHandler);
            document.addEventListener('mouseup', mouseUpHandler);
            
            // Add custom cursor style during resize
            document.body.style.cursor = 'col-resize';
            fileExplorer.style.userSelect = 'none';
            fileExplorer.style.pointerEvents = 'none';
        };
        
        // Handle the mousemove event that resizes
        const mouseMoveHandler = function(e) {
            // Calculate the new width
            const dx = e.clientX - x;
            fileExplorer.style.width = `${w + dx}px`;
        };
        
        // Handle the mouseup event that stops resizing
        const mouseUpHandler = function() {
            // Remove the handlers
            document.removeEventListener('mousemove', mouseMoveHandler);
            document.removeEventListener('mouseup', mouseUpHandler);
            
            // Reset cursor and selection
            document.body.style.cursor = '';
            fileExplorer.style.userSelect = '';
            fileExplorer.style.pointerEvents = '';
        };
        
        // Attach the handler
        resizer.addEventListener('mousedown', mouseDownHandler);
    }

    // If there's only one item, expand it by default.
    if (collapsibleHeaders.length === 1 && collapsibleHeaders[0].className.indexOf("collapsible-active") === -1) {
        collapsibleHeaders[0].click();
    }
</script>

<hr />
<footer>
    <center>
        Report generated by medusa
        <br />
        {{timeNow.UTC}}
        <br />
        <a href="https://github.com/crytic/medusa">github.com/crytic/medusa</a>
    </center>
</footer>
</body>
</html>
